{"version":3,"sources":["Context/MovieContext.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","components/TodoApp/MovieApp.tsx","App.tsx","index.tsx"],"names":["MoviesContect","React","createContext","movies","setMovies","MoviesProvider","children","useState","value","useMemo","Provider","MovieCard","movie","imgUrl","description","imdbUrl","title","className","src","alt","href","MoviesList","map","imdbId","FindMovie","useContext","setTitle","loading","setLoading","setMovie","hasError","setHasError","handleSubmit","event","a","preventDefault","query","toLowerCase","trim","fetch","then","res","json","catch","Response","Error","newRes","newMovie","Title","Plot","Poster","imdbID","finally","onSubmit","htmlFor","type","id","placeholder","cn","onChange","target","disabled","onClick","some","someMovie","currentMovies","MovieApp","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e01741d.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Movie } from '../types/Movie';\n\nexport const MoviesContect = React.createContext<{\n  movies: Movie[] | null;\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n}>({\n  movies: [],\n  setMovies: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const MoviesProvider: React.FC<Props> = ({ children }) => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const value = useMemo(() => ({\n    movies,\n    setMovies,\n  }), [movies]);\n\n  return (\n    <MoviesContect.Provider value={value}>\n      {children}\n    </MoviesContect.Provider>\n  );\n};\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  if (!movie) {\n    return null;\n  }\n\n  const {\n    imgUrl,\n    description,\n    imdbUrl,\n    title,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\nimport { Movie } from '../../types/Movie';\nimport { MoviesContect } from '../../Context/MovieContext';\n\nexport const FindMovie: React.FC = () => {\n  const { movies, setMovies } = useContext(MoviesContect);\n\n  const [title, setTitle] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [hasError, setHasError] = useState<boolean>(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setLoading(true);\n\n    getMovie(title.toLowerCase().trim())\n      .then(res => {\n        if ('Response' in res && res.Response === 'False') {\n          setHasError(true);\n          setMovie(null);\n        } else {\n          const newRes = res as MovieData;\n          const newMovie: Movie = {\n            title: newRes.Title || '...has no title...',\n            description: newRes.Plot || '',\n            imgUrl: newRes.Poster === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : newRes.Poster,\n            imdbUrl: `https://www.imdb.com/title/${newRes.imdbID}`,\n            imdbId: newRes.imdbID,\n          };\n\n          setMovie(newMovie);\n          setHasError(false);\n        }\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasError(false);\n  };\n\n  const addMovie = () => {\n    if (movie && movies && !movies.some(someMovie => {\n      return someMovie.imdbId === movie.imdbId;\n    })) {\n      setMovies((currentMovies) => [...currentMovies, movie]);\n    }\n\n    setTitle('');\n    setMovie(null);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', { 'is-danger': hasError })}\n              value={title}\n              onChange={handleTitle}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': loading,\n              })}\n              disabled={!title}\n            >\n              {!movie ? (\n                'Find a movie'\n              ) : (\n                'Search again'\n              )}\n\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => addMovie()}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=44ec3f9d';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useContext } from 'react';\nimport { MoviesList } from '../MoviesList';\nimport { FindMovie } from '../FindMovie';\nimport { MoviesContect } from '../../Context/MovieContext';\n\nexport const MovieApp: React.FC = () => {\n  const { movies } = useContext(MoviesContect);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies && <MoviesList movies={movies} />}\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie />\n      </div>\n    </div>\n  );\n};\n","import './App.scss';\nimport { MoviesProvider } from './Context/MovieContext';\nimport { MovieApp } from './components/TodoApp';\n\nexport const App = () => {\n  return (\n    <MoviesProvider>\n      <MovieApp />\n    </MoviesProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}